// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  firstName String
  lastName  String
  phone     String?
  password  String
  avatarUrl String?

  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  passwordReset PasswordReset? @relation("UserToPasswordReset")

  // Relations
  bookings Booking[]
  reviews  Review[]
  payments Payment[]

  @@map("users")
}

model PasswordReset {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation("UserToPasswordReset", fields: [userId], references: [id])
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Vehicle {
  id           String           @id @default(cuid())
  make         String
  model        String
  year         Int
  category     VehicleCategory
  fuelType     FuelType
  transmission TransmissionType
  seats        Int
  pricePerDay  Float
  isAvailable  Boolean          @default(true)
  description  String?
  imageUrl     String?
  licensePlate String           @unique
  mileage      Int?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  location     String // could be city or branch name

  // Relations
  bookings Booking[]
  reviews  Review[]

  @@map("vehicles")
}

model Booking {
  id          String        @id @default(cuid())
  userId      String
  vehicleId   String
  startDate   DateTime
  endDate     DateTime
  totalAmount Float
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  type        BookingType   @default(INSTANT)

  // Relations
  user     User      @relation(fields: [userId], references: [id])
  vehicle  Vehicle   @relation(fields: [vehicleId], references: [id])
  payments Payment[]
  couponId String?
  coupon   Coupon?   @relation(fields: [couponId], references: [id])

  @@map("bookings")
}

model Payment {
  id            String        @id @default(cuid())
  bookingId     String
  userId        String
  amount        Float
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  transactionId String?       @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  description String?
  discount    Float // Percentage or fixed amount
  validFrom   DateTime
  validTo     DateTime
  maxUses     Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relation
  bookings Booking[] // Optional, if you want to track usage
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  vehicleId String
  rating    Int      @db.SmallInt
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  vehicle Vehicle @relation(fields: [vehicleId], references: [id])

  @@map("reviews")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum VehicleCategory {
  SEDAN
  SUV
  HATCHBACK
  CONVERTIBLE
  LUXURY
  ECONOMY
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ACTIVE
  COMPLETED
  CANCELLED
}

enum BookingType {
  INSTANT
  REQUEST
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
