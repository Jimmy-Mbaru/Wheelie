@baseUrl = http://localhost:3000
@userToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJjbWNoY2Q2dGswMDAydXZvOGRjZDE1dDVlIiwiZW1haWwiOiJhZGFtc2pveTQwOUBnbWFpbC5jb20iLCJyb2xlIjoiVVNFUiIsImlhdCI6MTc1MTIwMDcwNywiZXhwIjoxNzUxMjg3MTA3fQ.nHVQ_TSgAlyA7J18CDRHo8PPlfmLzqNB6CPdhSWu3PQ
@reviewId = cmchoutau0005uvdsxz8dovj2
@vehicleId = cmcgr8d4q0002uveg0czsh5iw

### 1. Create a new review (requires auth)
POST {{baseUrl}}/reviews
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "vehicleId": "{{vehicleId}}",
  "rating": 4,
  "comment": "Smooth ride, clean interior. Highly recommend!"
}

### 2. Get all reviews
GET {{baseUrl}}/reviews
Authorization: Bearer {{userToken}}

### 3. Get all reviews for a specific vehicle
GET {{baseUrl}}/reviews?vehicleId={{vehicleId}}
Authorization: Bearer {{userToken}}

### 4. Get a review by ID
GET {{baseUrl}}/reviews/{{reviewId}}
Authorization: Bearer {{userToken}}

### 5. Update a review (only owner can do this)
PATCH {{baseUrl}}/reviews/{{reviewId}}
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "rating": 5,
  "comment": "Updated: Excellent service and very fuel efficient."
}

### 6. Delete a review (only owner can do this)
DELETE {{baseUrl}}/reviews/{{reviewId}}
Authorization: Bearer {{userToken}}

### 7. Create review without auth (should fail)
POST {{baseUrl}}/reviews
Content-Type: application/json

{
  "vehicleId": "{{vehicleId}}",
  "rating": 3,
  "comment": "Noisy brakes"
}

### 8. Create review with invalid data (should fail)
POST {{baseUrl}}/reviews
Authorization: Bearer {{userToken}}
Content-Type: application/json

{
  "vehicleId": "",
  "rating": "not-a-number",
  "comment": ""
}
